name: Release

on:
  push:
    tags:
      - "v*"

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write

jobs:
  build-release:
    name: Build Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: elm-package-mcp-server
            asset_name: elm-package-mcp-server-linux-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: elm-package-mcp-server
            asset_name: elm-package-mcp-server-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: elm-package-mcp-server
            asset_name: elm-package-mcp-server-macos-aarch64

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Build Release Binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: strip target/${{ matrix.target }}/release/${{ matrix.binary_name }}

      - name: Create tarball
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ../../../${{ matrix.asset_name }}.tar.gz ${{ matrix.binary_name }}
          cd -

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.asset_name }}.tar.gz
          retention-days: 1

  create-release:
    name: Create Release
    needs: build-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Read CHANGELOG
        id: changelog
        run: |
          # Extract the changelog section for this version
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          CHANGELOG_SECTION=$(awk -v ver="$VERSION" '
            /^## / && found { exit }
            /^## \[?'${VERSION#v}'/ { found=1; next }
            found { print }
          ' CHANGELOG.md | sed '/^$/d')

          # Use a delimiter for multiline content
          echo "NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_SECTION" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: ${{ steps.get_version.outputs.VERSION }}
          body: |
            ## Changes

            ${{ steps.changelog.outputs.NOTES }}

            ## Installation

            Download the appropriate binary for your platform and extract it:

            ```bash
            # For Linux x86_64
            tar xzf elm-package-mcp-server-linux-x86_64.tar.gz

            # For macOS x86_64 (Intel)
            tar xzf elm-package-mcp-server-macos-x86_64.tar.gz

            # For macOS aarch64 (Apple Silicon)
            tar xzf elm-package-mcp-server-macos-aarch64.tar.gz
            ```

            Then move the binary to a location in your PATH:

            ```bash
            sudo mv elm-package-mcp-server /usr/local/bin/
            # or
            mv elm-package-mcp-server ~/.local/bin/
            ```
          files: |
            artifacts/*/*.tar.gz
          draft: false
          prerelease: false

  publish-cargo:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Verify version matches tag
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          CARGO_VERSION=$(grep '^version' Cargo.toml | head -1 | cut -d'"' -f2)
          if [ "$TAG_VERSION" != "$CARGO_VERSION" ]; then
            echo "Tag version ($TAG_VERSION) does not match Cargo.toml version ($CARGO_VERSION)"
            exit 1
          fi

      - name: Publish to crates.io
        run: |
          if [ -n "$CARGO_REGISTRY_TOKEN" ]; then
            cargo publish --token $CARGO_REGISTRY_TOKEN
          else
            echo "CARGO_REGISTRY_TOKEN not set, skipping crates.io publish"
          fi
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
